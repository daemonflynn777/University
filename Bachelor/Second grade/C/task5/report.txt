Отчет по Task 5

Каждую команду, подлежащую выполнению в рамках
отдельного процесса (этот процесс создается shell’ом),
можно описать следующей структурой:
strurct cmd_inf
{
char ** argv; // список из имени команды и аргументов
char *infile; // переназначенный файл стандартного ввода
char *outfile; // переназначенный файл стандартного вывода
int backgrnd; // =1, если команда подлежит выполнению в фоновом
режиме
cmd_inf* psubcmd; // команды для запуска в дочернем shell
cmd_inf* pipe; // следующая команда после “|”
cmd_inf* next; // следующая после “;” (или после “&”)
};

Пример: находится в pdf-файле на почте.

Визуализация постройки дерева также находится на почте.

Тесты:
########################################
#                                      #
# - Тесты для лексического анализа -   #
#                                      #
########################################
#
echo Hello, world! # корректная команда. 2 аргумента команды echo
echo Hello , world ! # корректная команда. 4 аргумента команды echo. не должно быть
лишних пробелов.
echo "! Hello, world! !" # корректная команда. 1 аргумент команды echo. кавычки не выводятся.
пробелы между агументами
echo '! Hello, world! !' # корректная команда. 1 аргумент команды echo. кавычки не выводятся.
пробелы между агументами
echo "! Hello, world! ! # дисбаланс кавычек
echo '! Hello, world! ! # дисбаланс кавычек
echo "! Hello, world! !' # дисбаланс кавычек
echo '! Hello, world! !" # дисбаланс кавычек
echo "! Hello, " world! !" # дисбаланс кавычек
echo "! Hello, \" world! !" # корректная команда. экранирование внутренней кавычки
echo "! Hello, ''' world! !" # корректная команда
echo '! Hello, """ world! !' # корректная команда
echo \ \ Hello,\ \ world! # корректная команда. экранирование пробелов => все запишется как 1
аргумент команды echo
echo -e $USER \\n $EUID \\n $HOME \\n $SHELL # корректная команды. замена переменных +
экранирование
echo \\n # корректная команда
echo \$USER # корректная команда. вывод: $USER (за счет экранирования)
echo "Hello, $USER!" # корректная команда. замена переменной
echo 'Hello, $USER!' # корректная команда. нет замены переменной
echo Hello, $USER ! #comment # корректная команда. замена переменной + комментарий
echo Hello, $USER#nocomment # корректная команда. замена переменной. комментария нет
echo Hello, $USER \#nocomment # корректная команда. замена переменной. комментария нет, т.к.
экранируется '#'
echo Hello, $USER1 # корректная команда. нет замены переменной.
echo Hello, $user # корректная команда. нет замены переменной.
echo Hello, $USERa # корректная команда. нет замены переменной.
echo Hello,$USER! # корректная команда. замена переменной
echo $USER$HOME$SHELL # корректная команда. замена переменной
echo \(Hello\) # корректная команда. 1 аргумент. экранирование скобок
#
# любой символ должен экранироваться символом-слэш '\'
# запись в кавычках поисходит как запись 1 аргумента
# запись спец.символов без разделяющих пробелов должна обрабатываться корректно в
несколько аргументов
# пробельный последовательности должны быть отброшены
#
#
#
#
#########################################
#                                       #
# - Тесты для синтаксического анализа - #
#                                       #
#########################################
#
(pwd) # корректная команда
(pwd # дисбаланс скобок
pwd) # дисбаланс скобок
)pwd # дисбаланс скобок
((( # дисбаланс скобок
))) # дисбаланс скобок
(pwd() # дисбаланс скобок
\(pwd) # диcбаланс скобок. экранирование
(pwd\) # диcбаланс скобок. экранирование
pwd(ls) # отсутсвует разделитель команд
(ls)pwd # отсутсвует разделитель команд
(ls(ls)) # отсутсвует разделитель команд
(ls); # корректная команда
(ls)& # корректная команда
(ls;) # корректная команда
(ls&) # корректная команда
pwd && # отсутсвует команда
|| pwd # отсутсвует команда
& pwd # отсутсвует команда
;;; # отсутсвует команда
(pwd) < in.txt > out.txt # корректная команда
pwd >>> out.txt # отсутсвует разделитель команд
| pwd | cat -n # отсутсвует команда
pwd | # отсутсвует команда
pwd & | ls # отсутсвует команда
pwd &&& # отсутсвует разделитель команд
pwd && | ls # отсутсвует команда
#
# не может быть пустой команды и лишних разделителей
#
#
#########################################
#                                       #
# - Тесты для исполнительного анализа - #
#                                       #
#########################################
#
exit # завершение процесса
exit&
cd # смена каталога на домашний
cd . # смена каталога на текущий
cd .. # смена каталога на родительский
cd / # смена каталога на корневой
cd $HOME # смена каталога на домашний
cd ~ # смена каталога на домашний
cd noex # noex - несуществующий файл
cd arg1 arg2 <...> # >= 2 аргументов у команды cd
touch info.txt
# логика
pwd && ls
pwd || ls
pwd && false || ls
pwd && true || ls
pwd || false && ls
pwd || true && ls
pwd || ls || who;
pwd && ls && who;
pwd || ls || who&
pwd && ls && who&
# subshell
(exit)
(pwd)
((pwd))
((pwd|cat -n)|cat -n)
(pwd;exit;ls)
(exit;yes)
(pwd) > info.txt
(echo $USER) >> info.txt
# конвейер
yes | head
ls | cat -n >> info.txt
pwd | pwd | pwd
pwd | sleep 3
# комбинировано
sleep 5& pwd
sleep 3; pwd
sleep 3 && pwd
(false) && pwd
(false&) && pwd
(false;ls) && pwd
(ls;true) && pwd
pwd | false && ls
pwd | true && ls
#
# после выполнения любой команды не должно быть утечки памяти и зомби-процессов ни в одном
из созданных процессов
# прервать любую команду ^C. не должно остаться зомби